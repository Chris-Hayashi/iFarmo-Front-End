"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _colors = require("../../../constants/colors");

var _Button = _interopRequireDefault(require("../../Button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const CancelButton = ({
  text,
  visible,
  style,
  textStyle,
  accessibilityLabel = 'cancel',
  onPress
}) => {
  const [width, setWidth] = (0, _react.useState)();
  const animationValue = (0, _react.useRef)(new _reactNative.Animated.Value(visible ? 1 : 0));
  (0, _react.useLayoutEffect)(() => {
    const animation = _reactNative.Animated.timing(animationValue.current, {
      toValue: visible ? 1 : 0,
      useNativeDriver: true,
      duration: visible ? 250 : 200,
      delay: visible ? 50 : 0,
      easing: _reactNative.Easing.inOut(_reactNative.Easing.ease)
    });

    animation.start();
    return animation.stop;
  }, [visible]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
    style: [{
      opacity: animationValue.current,
      transform: [{
        translateX: animationValue.current.interpolate({
          inputRange: [0, 1],
          outputRange: [width || 1, 0]
        })
      }]
    }, !visible && styles.notVisible, style],
    onLayout: e => {
      setWidth(e.nativeEvent.layout.width);
    }
  }, /*#__PURE__*/_react.default.createElement(_Button.default, {
    onPress: onPress,
    accessibilityLabel: accessibilityLabel,
    hitSlop: 8
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.cancelButtonText, textStyle],
    allowFontScaling: false
  }, text)));
};

const styles = _reactNative.StyleSheet.create({
  cancelButtonText: {
    color: _colors.iosBlue,
    fontSize: 16
  },
  notVisible: {
    position: 'absolute',
    right: 0
  }
});

var _default = CancelButton;
exports.default = _default;
//# sourceMappingURL=CancelButton.js.map