{"version":3,"sources":["index.tsx"],"names":["SearchBar","ref","value","theme","placeholderTextColor","androidLightPlaceholderGray","androidDarkPlaceholderGray","iconColor","selectionColor","clearAccessibilityLabel","leftIcon","style","inputStyle","children","onChangeText","onClear","props","styles","defaultStyles","darkStyles","inputRef","current","handleClear","wrapper","input","clearButton","clearIcon","undefined","StyleSheet","create","flexDirection","alignItems","flex","backgroundColor","paddingHorizontal","paddingVertical","borderRadius","fontSize","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","position","aspectRatio","marginLeft","marginRight","color"],"mappings":"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","sourcesContent":["import React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { View, TextInput, StyleSheet } from 'react-native';\nimport type { SearchBarProps } from '../../../types';\nimport SearchIcon from '../../icons/SearchIcon';\nimport {\n    androidLightPlaceholderGray,\n    androidDarkPlaceholderGray,\n} from '../../../constants/colors';\nimport ClearIcon from '../../icons/ClearIconAndroid';\nimport Button from '../../Button';\n\nconst SearchBar = forwardRef<TextInput, SearchBarProps>(\n    (\n        {\n            value,\n            theme = 'light',\n            placeholderTextColor = theme === 'light'\n                ? androidLightPlaceholderGray\n                : androidDarkPlaceholderGray,\n            iconColor = placeholderTextColor,\n            selectionColor = theme === 'light'\n                ? androidLightPlaceholderGray\n                : androidDarkPlaceholderGray,\n            clearAccessibilityLabel,\n            leftIcon,\n            style,\n            inputStyle,\n            children,\n            onChangeText,\n            onClear,\n            ...props\n        },\n        ref\n    ) => {\n        const styles = theme === 'light' ? defaultStyles : darkStyles;\n\n        const inputRef = useRef<TextInput>(null);\n        useImperativeHandle(ref, () => inputRef.current!);\n\n        const handleClear = () => {\n            if (onClear) {\n                onClear();\n            }\n            onChangeText('');\n        };\n\n        return (\n            <View style={[styles.wrapper, style]}>\n                <TextInput\n                    ref={inputRef}\n                    value={value}\n                    selectionColor={selectionColor}\n                    placeholderTextColor={placeholderTextColor}\n                    onChangeText={onChangeText}\n                    clearButtonMode=\"never\"\n                    autoCorrect={false}\n                    accessibilityRole=\"search\"\n                    accessibilityTraits=\"search\"\n                    {...props}\n                    style={[styles.input, inputStyle]}\n                />\n                <View pointerEvents=\"box-none\" style={styles.children}>\n                    {leftIcon ? (\n                        <View style={styles.leftIcon}>{leftIcon}</View>\n                    ) : (\n                        <SearchIcon color={iconColor} style={styles.leftIcon} />\n                    )}\n                    {children}\n                    {value ? (\n                        <Button\n                            onPress={handleClear}\n                            hitSlop={8}\n                            accessibilityLabel={clearAccessibilityLabel}\n                            style={styles.clearButton}\n                        >\n                            <ClearIcon\n                                color={iconColor}\n                                style={styles.clearIcon}\n                            />\n                        </Button>\n                    ) : undefined}\n                </View>\n            </View>\n        );\n    }\n);\n\nconst defaultStyles = StyleSheet.create({\n    wrapper: {\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    input: {\n        flex: 1,\n        backgroundColor: '#FFF',\n        paddingHorizontal: 40,\n        paddingVertical: 12,\n        borderRadius: 4,\n        fontSize: 16,\n        shadowColor: '#000',\n        shadowOffset: {\n            width: 0,\n            height: 2,\n        },\n        shadowOpacity: 0.22,\n        shadowRadius: 2.22,\n        elevation: 3,\n    },\n    children: {\n        position: 'absolute',\n        flexDirection: 'row',\n        width: '100%',\n        height: '100%',\n        alignItems: 'center',\n        elevation: 3,\n    },\n    leftIcon: {\n        height: '40%',\n        aspectRatio: 1,\n        marginLeft: 10,\n        marginRight: 'auto',\n    },\n    clearButton: {\n        marginRight: 10,\n    },\n    clearIcon: {\n        height: '40%',\n        aspectRatio: 1,\n    },\n});\n\nconst darkStyles = StyleSheet.create({\n    ...defaultStyles,\n    input: {\n        ...defaultStyles.input,\n        backgroundColor: '#28282d',\n        color: '#FFF',\n    },\n});\n\nexport default SearchBar;\n"]}